/**
 * @author ngoanh2n@gmail.com (Ho Huu Ngoan)
 */

group group
version version

apply plugin: 'java'
apply plugin: 'idea'    // Optional using for IntelliJ IDEA
apply plugin: 'eclipse' // Optional using for Eclipse
apply plugin: 'signing'
apply plugin: 'java-library'
apply plugin: 'maven-publish'
apply plugin: 'com.bmuschko.nexus'

[compileJava, compileTestJava]*.sourceCompatibility = 1.8
[compileJava, compileTestJava]*.targetCompatibility = 1.8
[compileJava, compileTestJava]*.options.collect { options -> options.debug = true }
[compileJava, compileTestJava]*.options.collect { options -> options.encoding = 'UTF-8' }

repositories {
    jcenter()
    mavenCentral()
    maven {
        url "https://plugins.gradle.org/m2/"
    }
}

ext {
    GUAVA_VERSION                   = '28.2-jre'
    SLF4J_VERSION                   = '1.7.30'
    CSV_PARSER_VERSION              = '2.8.4'
    JUNIT5_JUPITER_VERSION          = '5.7.0'
}

dependencies {
    implementation('org.slf4j:slf4j-api:1.7.30')
    testImplementation('org.slf4j:slf4j-log4j12:1.7.30')
    implementation('com.univocity:univocity-parsers:2.8.4')
    testImplementation('org.junit.jupiter:junit-jupiter-api:5.6.0')
    testImplementation('org.junit.jupiter:junit-jupiter-engine:5.6.0')
}

buildscript {
    repositories {
        jcenter()
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath 'com.bmuschko:gradle-nexus-plugin:2.3.1'
    }
}

tasks.withType(Test).all { testTask ->
    testTask.systemProperties = [
            'file.encoding': 'UTF-8',
            'BUILD_URL'    : System.getenv()['BUILD_URL']
    ]
    testTask.testLogging.showStandardStreams = true
    testTask.outputs.upToDateWhen { false }
}

tasks.withType(Test) {
    /*
    * Enable JUnit Platform (JUnit 5) support, default is JUnit
    */
    useJUnitPlatform() {
        /*
        * Filter by engines
        */
        includeEngines 'junit-jupiter'
        //excludeEngines 'junit-vintage'

        /*
        * Filter by tags
        */
        //includeTags 'fast', 'smoke'
        //excludeTags 'slow', 'ci'
    }

    /*
    * Make failing tests do not fail the task
    */
    ignoreFailures = false

    /*
    * To show standard out and standard error of the test JVM(s) on the console
    */
    testLogging.showStandardStreams = true

    /*
    *  Want to display the following test events
    */
    testLogging { events 'passed', 'skipped', 'failed' }

    /*
    * To make the Gradle JVM system properties available to tests
    */
    systemProperties = System.getProperties() as Map<String, ?>
}

tasks.withType(Javadoc) {
    options.addStringOption('Xdoclint:none', '-quiet')
    options.addStringOption('encoding', 'UTF-8')
    options.addStringOption('charSet', 'UTF-8')
}

modifyPom {
    project {
        name 'csv-comparator'
        description 'Utils for comparison and assertion CSV files in Java'
        url 'https://github.com/ngoanh2n/csv-comparator'
        inceptionYear '2020'

        scm {
            connection 'scm:git:git://github.com/ngoanh2n/csv-comparator.git'
            developerConnection 'scm:git:ssh://github.com/ngoanh2n/csv-comparator.git'
            url 'http://github.com/ngoanh2n/csv-comparator/tree/master'
        }

        licenses {
            license {
                name 'MIT'
                url 'https://opensource.org/licenses/MIT'
            }
        }

        developers {
            developer {
                id 'ngoanh2n'
                name 'Ho Huu Ngoan'
                email 'ngoanh2n@gmail.com'
                organizationUrl 'https://ngoanh2n.github.io/'
            }
        }
    }
}

extraArchive {
    sources = true
    tests = true
    javadoc = true
}

nexus {
    sign = true
    repositoryUrl = 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
    snapshotRepositoryUrl = 'https://oss.sonatype.org/content/repositories/snapshots/'
}
